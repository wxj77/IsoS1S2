function [FileOut,ee_merge] = Level2(DataFile,DataPath,DataOutPath,DataSet,Setting)

%%%% For debug
%DataFile = 'lux10_20130728T2255_f000000100.dat';
%DataPath = 'E:\LUXData\dat\lux10_20130728T2255\';
%Setting = XMLReader_framework('Settings_SR20.xml');
%%%%%


[raw, livetime, xlm] = LUXLoadRawDataFile(DataFile,DataPath);
TotalRawChunk = ceil((livetime.end-livetime.latch)/(Setting.wrapper.RawChunkSize_samples-Setting.wrapper.RawChunkRollBack_samples));
NextChunkStart = livetime.latch;
TimeFieldName = {...
    'sumpod_time_samples',...
    'sumpod_start_samples',...
    'pod_start_samples',...
    'pod_time_samples',...
    'pulse_start_samples',...
    'pulse_end_samples',...
    'aft_t0_samples',...
    'aft_t05_samples',...
    'aft_tlx_samples',...
    'aft_t25_samples',...
    'aft_t1_samples',...
    'aft_t75_samples',...
    'aft_trx_samples',...
    'aft_t95_samples',...
    'aft_t2_samples',...
    'hft_t0_samples',...
    'hft_t10l_samples',...
    'hft_t50l_samples',...
    'hft_t1_samples',...
    'hft_t50r_samples',...
    'hft_t10r_samples',...
    'hft_t2_samples',...
    'skinny_pulse_start_samples',...
    'skinny_pulse_end_samples',...
    'pulse_height_timing_samples',...
    'gaus_fit_mu_samples',...
    'exp_fit_time_offset_samples'...
    };
PerEventFieldName = {...
    'event_timestamp_samples',...  %This is a time quantities, but it will always be an absolute value (as in not relative)
    'num_pulses_found',...
    'n_samples_in_evt',...
    'full_evt_area_phe'
    };
PerPeakFieldName = {...
    'peak_width_samples',...
    'spike_count',...
    'peak_area_phe',...
    'peak_area_negative_phe',...
    'peak_height_phe_per_sample',...
    'mean_first_last_pts_phe_per_sample',...
    'peak_height_mV',...
    'daq_saturation_flag',...
    'pmt_2pct_saturation_flag',...
    'peak_detect_pretrigger_mean_phe',...
    'peak_detect_posttrigger_mean_phe',...
    'peak_detect_pretrigger_std_phe',...
    'peak_detect_posttrigger_std_phe',...
    'baseline_daq_mV',...
    'peak_area_thr_phe',...
    'skinny_peak_height_mV',...
    'skinny_peak_area_phe',...
    'peak_area_rec'...
    };
IgnoreFieldName = {...
    'admin',...
    'ch_map',...
    'info',...
    'empty',...
    'thr',...
    'ch',...
    'adc_ppe',...
    'adc_sds',...
    'zen_applied',...
    'rec_energy_flag',...
    'minimization_flag',...
    'rqs'...
    };
InfoFieldName = {...
    'ch_map',...
    'info',...
    'empty',...
    'thr',...
    'ch',...
    'adc_ppe',...
    'adc_sds',...
    'zen_applied',...
    'rqs'...
    };

%missing stuffs                                
%1. ee.timestamp
%2. ee.trigger_pulse)timestamp_smaples

clear ee_merge ee_rqs
try     
	for cs = 1:TotalRawChunk
	    %if cs > 2;return;end
	    %Initialize ee_merge
	    %[ee] = DatPulseFinderClassifier_BH(raw, NextChunkStart, [0 Setting.wrapper.RawChunkSize_samples]);
	    %[ee] = DatPulseFinderClassifierExtended_BH(raw, NextChunkStart, [0 Setting.wrapper.RawChunkSize_samples], Setting, Debug);
	    [ee] = Level3(raw, NextChunkStart, [0 Setting.wrapper.RawChunkSize_samples], Setting, DataPath, DataSet);
	    if (cs == 1)
		ee_fields = fieldnames(ee);
		ee_ch_fields = fieldnames(ee.ch);
		ee_rqs_fields = fieldnames(ee.rqs);
		ee_info_fields = fieldnames(ee.info);
		for ii = 1:length(ee_fields)
		    if ~ismember(ee_fields{ii},IgnoreFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		       ee_merge.(ee_fields{ii}) = [];
		    end
		end
		for ii = 1:length(ee_ch_fields)
		    if ~ismember(ee_ch_fields{ii},IgnoreFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		        for ch = 1:122
		            ee_merge.ch(ch).(ee_ch_fields{ii}) = [];
		        end
		    end
		end
		for ii = 1:length(ee_rqs_fields)
		    if ~ismember(ee_rqs_fields{ii},IgnoreFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		        if ismember(ee_rqs_fields{ii},PerEventFieldName)
		            ee_merge.rqs.(ee_rqs_fields{ii}) = 0;
		        else
		            ee_merge.rqs.(ee_rqs_fields{ii}) = [];
		        end
		    end
		end
		for ii = 1:length(ee_info_fields)
		    ee_merge.info.(ee_info_fields{ii}) = cell(TotalRawChunk,1);
		end
	    end
	%{        
	%%%%%%%%%%%%%%%%         
	ee_merge = struct('sumpod_data_phe_per_sample',[],'sumpod_time_samples',[],'sumpod_start_samples',[],'sumpod_length_samples',[],'trigger_pulse_timestamp_samples',[]);
	ee_merge.ch = struct('pod_start_samples',cell(1,128),'pod_length_samples',cell(1,128),'pod_baseline_mV',cell(1,128),'pod_time_samples',cell(1,128),'pod_data_mV',cell(1,128),'pod_data_phe_per_sample',cell(1,128));
	ee_merge.rqs = struct(...
	    'pulse_start_samples',[],...
	    'pulse_end_samples',[],...
	    'aft_t0_samples',[],...
	    'aft_t1_samples',[],...
	    'aft_t2_samples',[],...
	    'hft_t0_samples',[],...
	    'hft_t1_samples',[],...
	    'hft_t2_samples',[],...
	    'pulse_area_phe',[],...
	    'pulse_height_phe_per_sample',[],...
	    'prompt_fraction',[],...
	    'top_bottom_ratio',[],...
	    'top_bottom_asymmetry',[],...
	    'exp_fit_amplitude_phe_per_sample',[],...
	    'exp_fit_tau_fall_samples',[],...
	    'exp_fit_time_offset_samples',[],...
	    'exp_fit_tau_rise_samples',[],...
	    'exp_fit_chisq',[],...
	    'exp_fit_dof',[],...
	    'gaus_fit_amplitude_phe_per_sample',[],...
	    'gaus_fit_mu_samples',[],...
	    'gaus_fit_sigma_samples',[],...
	    'gaus_fit_chisq',[],...
	    'gaus_fit_dof',[],...
	    's2filter_max_area_diff',[],...
	    's2filter_max_s2_area',[],...
	    's2filter_max_s1_area',[],...
	    'pulse_length_samples',[],...
	    'peak_area_phe',[],...
	    'peak_height_mV',[],...
	    'pulse_classification',[]...
	    );
	    end
	%%%%%%%%%%
	%}     
	   
	    %Fuck it. Once again, trying to write a cool code but it just way too
	    %complicated too think
	    if ee.empty == 0
		ee_fieldname = fieldnames(ee_merge);
		FirstIndexToKeep_waveform   = find(~ismember(NextChunkStart + ee.sumpod_time_samples,ee_merge.sumpod_time_samples),1,'first');
		FirstIndexToKeep_pulse_time = find(~ismember(NextChunkStart + ee.sumpod_start_samples,ee_merge.sumpod_start_samples),1,'first');
		FirstIndexToKeep_timestamp  = find(~ismember(NextChunkStart + ee.sumpod_start_samples,ee_merge.sumpod_start_samples),1,'first');
		FirstIndexToKeep_trgtimestamp  = find(~ismember(ee.trigger_pulse_timestamp_samples,ee_merge.trigger_pulse_timestamp_samples),1,'first');
		for nn = 1:length(ee_fieldname) %Need to exclude stuffs we don't wanna keep.
		    if ismember(ee_fieldname{nn},IgnoreFieldName) || strcmp(ee_fieldname{nn},'rqs') || strcmp(ee_fieldname{nn},'ch')
		        continue
		    end
		    if ismember(ee_fieldname{nn},{'sumpod_time_samples','sumpod_data_phe_per_sample'})
		        FirstIndexToKeep = FirstIndexToKeep_waveform;
		    elseif ismember(ee_fieldname{nn},{'sumpod_start_samples','sumpod_length_samples'})
		        FirstIndexToKeep = FirstIndexToKeep_pulse_time;
		    elseif ismember(ee_fieldname{nn},{'timestamp'})
		        FirstIndexToKeep = FirstIndexToKeep_timestamp;
		    elseif ismember(ee_fieldname{nn},{'trigger_pulse_timestamp_samples'})
		        FirstIndexToKeep = FirstIndexToKeep_trgtimestamp;
		    end
		    if isempty(ee.(ee_fieldname{nn})(FirstIndexToKeep:end))
		        continue
		    end
		    if ismember(ee_fieldname{nn},TimeFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		        if size(ee.(ee_fieldname{nn}),2) ~= 1
		            ee_merge.(ee_fieldname{nn}) = vertcat(ee_merge.(ee_fieldname{nn}),permute(NextChunkStart + ee.(ee_fieldname{nn})(FirstIndexToKeep:end),[2 1]));
		        else
		            ee_merge.(ee_fieldname{nn}) = vertcat(ee_merge.(ee_fieldname{nn}),NextChunkStart + ee.(ee_fieldname{nn})(FirstIndexToKeep:end));
		        end
		    elseif ismember(ee_fieldname{nn},PerEventFieldName)
		        
		        ee_merge.(ee_fieldname{nn}) = ee_merge.(ee_fieldname{nn}) + ee.(ee_fieldname{nn});
		    else
		        if size(ee.(ee_fieldname{nn}),2) ~= 1
		            ee_merge.(ee_fieldname{nn}) = vertcat(ee_merge.(ee_fieldname{nn}),permute(ee.(ee_fieldname{nn})(FirstIndexToKeep:end),[2 1]));
		        else
		            ee_merge.(ee_fieldname{nn}) = vertcat(ee_merge.(ee_fieldname{nn}),ee.(ee_fieldname{nn})(FirstIndexToKeep:end));
		        end
		    end
		end
		for ch = 1:122
		    ee_ch_fieldname = fieldnames(ee_merge.ch);
		    FirstIndexToKeep_waveform   = find(~ismember(NextChunkStart+ee.ch(ch).pod_time_samples,ee_merge.ch(ch).pod_time_samples),1,'first');
		    FirstIndexToKeep_pulse_time = find(~ismember(NextChunkStart+ee.ch(ch).pod_start_samples,ee_merge.ch(ch).pod_start_samples),1,'first');
		    for nn = 1:length(ee_ch_fieldname)
		        if ismember(ee_ch_fieldname{nn},IgnoreFieldName) || strcmp(ee_ch_fieldname{nn},'rqs') || strcmp(ee_ch_fieldname{nn},'ch')
		            continue
		        end
		        if ismember(ee_ch_fieldname{nn},{'pod_time_samples','pod_data','pod_data_mV','pod_data_phe_per_sample'})
		            FirstIndexToKeep = FirstIndexToKeep_waveform;
		        elseif ismember(ee_ch_fieldname{nn},{'pod_start_samples','pod_length_samples','pod_baseline','pod_baseline_mV'})
		            FirstIndexToKeep = FirstIndexToKeep_pulse_time;
		        end
		        if isempty(ee.ch(ch).(ee_ch_fieldname{nn})(FirstIndexToKeep:end))
		            continue
		        end
		        if ismember(ee_ch_fieldname{nn},TimeFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		            if size(ee.ch(ch).(ee_ch_fieldname{nn}),2) ~= 1
		                ee_merge.ch(ch).(ee_ch_fieldname{nn}) = vertcat(ee_merge.ch(ch).(ee_ch_fieldname{nn}),permute(NextChunkStart + ee.ch(ch).(ee_ch_fieldname{nn})(FirstIndexToKeep:end),[2 1]));
		            else
		                ee_merge.ch(ch).(ee_ch_fieldname{nn}) = vertcat(ee_merge.ch(ch).(ee_ch_fieldname{nn}),NextChunkStart + ee.ch(ch).(ee_ch_fieldname{nn})(FirstIndexToKeep:end));
		            end
		        elseif ismember(ee_ch_fieldname{nn},PerEventFieldName)
		          
		            ee_merge.ch(ch).(ee_ch_fieldname{nn}) = ee_merge.ch(ch).(ee_ch_fieldname{nn}) + ee.ch(ch).(ee_ch_fieldname{nn});
		            
		        else
		            if size(ee.ch(ch).(ee_ch_fieldname{nn}),2) ~= 1
		                ee_merge.ch(ch).(ee_ch_fieldname{nn}) = vertcat(ee_merge.ch(ch).(ee_ch_fieldname{nn}),permute(ee.ch(ch).(ee_ch_fieldname{nn})(FirstIndexToKeep:end),[2 1]));
		            else
		                ee_merge.ch(ch).(ee_ch_fieldname{nn}) = vertcat(ee_merge.ch(ch).(ee_ch_fieldname{nn}),ee.ch(ch).(ee_ch_fieldname{nn})(FirstIndexToKeep:end));
		            end
		        end
		    end
		end
		%% This is merging rqs
		if ee.rqs.num_pulses_found > 0
		 
		    ee_rqs_fieldname = fieldnames(ee_merge.rqs);
		    %ee_merge.info.correction_factor   = ee.rqs.admin;
		    if ~isempty(ee.rqs.pulse_start_samples)%Seem to recall that pick pulse_start_samples to find the first pulse to keep since it is by definition unique for each pulse.
		        if cs == 1
		            FirstPulseToKeep = 1;
		        else
		            FirstPulseToKeep = find( ((NextChunkStart + ee.rqs.pulse_start_samples) > ee_merge.rqs.pulse_start_samples(end)) & ((ee.rqs.pulse_start_samples) > Setting.wrapper.RawChunkIgnoreStarting_samples),1,'first');
		        end
		        %LastPulseToKeep  = find( (NextChunkStart + Setting.wrapper.RawChunkSize_samples - ee.rqs.pulse_end_samples) > Setting.wrapper.RawChunkIgnoreEnding_samples,1,'last');
		        LastPulseToKeep  = find( (Setting.wrapper.RawChunkSize_samples - ee.rqs.pulse_end_samples) > Setting.wrapper.RawChunkIgnoreEnding_samples,1,'last');
		    else%In case of empty slap, these two below are just dummies for empty matrix.
		        FirstPulseToKeep = length(ee.rqs.pulse_start_samples)+1;
		        LastPulseToKeep = length(ee.rqs.pulse_start_samples);
		    end
		    for nn = 1:length(ee_rqs_fieldname)
		        if ismember(ee_rqs_fieldname{nn},IgnoreFieldName) || strcmp(ee_rqs_fieldname{nn},'rqs') || strcmp(ee_rqs_fieldname{nn},'ch')
		            continue
		        end
		        if ~ismember(ee_rqs_fieldname{nn},PerEventFieldName)
		            if isempty(ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep))
		                continue
		            end
		        end
		        if ismember(ee_rqs_fieldname{nn},TimeFieldName)%if it is time rqs, need to offset it with the NextChunkStart since the DatPFC return time as respect to the TrgTime
		            if size(ee.rqs.(ee_rqs_fieldname{nn}),2) ~= 1
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),permute(NextChunkStart + ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep),[2 1]));
		            else
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),NextChunkStart + ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep));
		            end
		        elseif ismember(ee_rqs_fieldname{nn},PerEventFieldName)

		            ee_merge.rqs.(ee_rqs_fieldname{nn}) = ee_merge.rqs.(ee_rqs_fieldname{nn}) + ee.rqs.(ee_rqs_fieldname{nn});

		        elseif ismember(ee_rqs_fieldname{nn},PerPeakFieldName)    
		            if size(ee.rqs.(ee_rqs_fieldname{nn}),2) == 122
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep,:));
		            else
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),permute(ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep,:),[2 1]));
		            end   
		        else
		            if size(ee.rqs.(ee_rqs_fieldname{nn}),2) ~= 1
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),permute(ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep),[2 1]));
		            else
		                ee_merge.rqs.(ee_rqs_fieldname{nn}) = vertcat(ee_merge.rqs.(ee_rqs_fieldname{nn}),ee.rqs.(ee_rqs_fieldname{nn})(FirstPulseToKeep:LastPulseToKeep));
		            end
		        end
		    end
		   
		end
		%% Keep the info fields
		for ii = 1:length(ee_info_fields)
		    ee_merge.info.(ee_info_fields{ii}){cs,1} = ee.info.(ee_info_fields{ii});
		end
		
	    end
	    NextChunkStart = NextChunkStart + Setting.wrapper.RawChunkSize_samples - Setting.wrapper.RawChunkRollBack_samples;

	end
	%%
	ee_merge.livetime = livetime;
	ee_merge.xlm = xlm;
	ee_merge.info.file_loaded = DataFile;
	ee_merge.info.setting = Setting; 
	ee_merge.info.total_dat_slaps     = TotalRawChunk;
	ee_merge.info.dat_slap_time_start = livetime.latch + ((1:TotalRawChunk)-1)*(Setting.wrapper.RawChunkSize_samples - Setting.wrapper.RawChunkRollBack_samples);
	ee_merge.info.dat_slap_time_end   = ee_merge.info.dat_slap_time_start + Setting.wrapper.RawChunkSize_samples;
	%% Etrain stuffs
	if Setting.dp_module_setting.etrain_rqs.run_module
	    if ee_merge.rqs.num_pulses_found > 0
		try
		    ee_merge = DatPFC_EtrainCut(ee_merge);
		    ee_merge.info.EtrainRQsSuccess = 1;
		    ee_merge.info.EtrainRQsError   = '';
		catch exception
		    ee_merge.info.EtrainRQsSuccess = 0;
		    ee_merge.info.EtrainRQsError   = exception.identifier;
		end
	    else
		ee_merge.info.EtrainRQsSuccess = 0;
		ee_merge.info.EtrainRQsError   = 'No pulse found.';
	    end
	end





	%% PSD stuffs
	if Setting.dp_module_setting.psd_rqs.run_module
	    if ee_merge.rqs.num_pulses_found > 0
		if sum(ee_merge.rqs.pulse_classification == 1) > 0
		    try
		        PSDRQs_XML = XMLReader_framework([Setting.wrapper.xml_file_path Setting.dp_module_setting.psd_rqs.setting_xml]);
		        ee_merge = DatPFC_PSDRQsModule_N_Gumbel_6(ee_merge,PSDRQs_XML);
		        ee_merge.info.PSDRQsSuccess = 1;
		        ee_merge.info.PSDRQsError   = '';
		    catch exception
		        ee_merge.info.PSDRQsSuccess = 0;
		        ee_merge.info.PSDRQsError   = exception.identifier;
		    end
		else
		        ee_merge.info.PSDRQsSuccess = 0;
		        ee_merge.info.PSDRQsError   = 'No S1 found.';
		end
	    else
		ee_merge.info.PSDRQsSuccess = 0;
		ee_merge.info.PSDRQsError   = 'No pulse found.';
	    end
	end
	%% TrgRQs stuffs
	if Setting.dp_module_setting.trg_rqs.run_module
	    if ee_merge.rqs.num_pulses_found > 0
		    try
		        TrgRQs_XML = XMLReader_framework([Setting.wrapper.xml_file_path Setting.dp_module_setting.trg_rqs.setting_xml]);
		        GroupPMTID = LoadSumConfiguration16Ch(TrgRQs_XML.setting.TrgSummingConfiguration);
		        TrgSetting = SetTrigger(GetTrgSettingXML([Setting.wrapper.xml_file_path TrgRQs_XML.setting.TriggerSettingXML]));
		        ee_merge = DatPFC_TrgRQs(ee_merge,TrgRQs_XML,TrgSetting,GroupPMTID);
		        ee_merge.info.TrgRQsSuccess = 1;
		        ee_merge.info.TrgRQsError   = '';
		    catch exception
		        ee_merge.info.TrgRQsSuccess = 0;
		        ee_merge.info.TrgRQsError   = exception.identifier;
		    end
	    else
		ee_merge.info.TrgRQsSuccess = 0;
		ee_merge.info.TrgRQsError   = 'No pulse found.';
	    end
	end
	%%
	if strcmp(Setting.wrapper.save_level,'both')
		FileOut = [strrep(DataOutPath,'dat','DatPFC_Extended') filesep strrep(DataFile,'.dat' ,'_DatPFC_Extended_Full.mat')];  
	    %save(FileOut,'ee_merge')
		FileOut = [strrep(DataOutPath,'dat','DatPFC_Extended') filesep strrep(DataFile,'.dat' ,'_DatPFC_Extended_Lite.mat')];  
	    ee_rqs = rmfield(ee_merge,{'ch','sumpod_data_phe_per_sample','sumpod_time_samples','sumpod_start_samples','sumpod_length_samples'});
	    %save(FileOut,'ee_rqs')
	elseif strcmp(Setting.wrapper.save_level,'full')
	    FileOut = [strrep(DataOutPath,'dat','DatPFC_Extended') filesep strrep(DataFile,'.dat' ,'_DatPFC_Extended_Full.mat')];  
	    %save(FileOut,'ee_merge')
	elseif strcmp(Setting.wrapper.save_level,'lite')
	    FileOut = [strrep(DataOutPath,'dat','DatPFC_Extended') filesep strrep(DataFile,'.dat' ,'_DatPFC_Extended_Lite.mat')];  
	    ee_rqs = rmfield(ee_merge,{'ch','sumpod_data_phe_per_sample','sumpod_time_samples','sumpod_start_samples','sumpod_length_samples'});
	    %save(FileOut,'ee_rqs')
	else
	    disp('Do not recognize save level.')
	end
catch exception
	disp('low level issue')
end

return







